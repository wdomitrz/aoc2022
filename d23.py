# %%
from itertools import product

d = """
.#....#...##....##.#.###..##..#..#.#.###....#.###.###.##..###......#..##.
...#.##.#..#.#.######...##..#.#...#########.#.######..#.#.#.#...###.#.#.#
###.#.####.#.##.##....##..###.##..##..#.###.#.#.##...#######...###.##...#
.#...#####.##......##.#..###....###..#..#...###..##..##.#.##.###.#.######
.#...#...#.###.....##.##.########.#.##...##..##..#....#.####.###.##......
#####.......###..##..##...#..#.....#..#..##.##...##..........#.#.##.#.###
##..###.#.###.###.#....#...###....#...#.###..##.##.###.#.#.#..###..##.##.
#......#..###....#..###.###.#.#..##..##.###.#.#..#.#.###..###..#..##.##.#
#..####....#.#..#.#.....#...#.##.##.##...#.##.#.#..#.##.#####..##.#.##.#.
.#######..#####.#.#.#...##.#.####.#.#.##....##.##..####..####.#..##..###.
.#.##.###.#######.#...#.##...###........#.###..#.###....#..#....#.##.##..
.#.#.####..##.#.#####.#.....##.###.#..##.##...##.###....####...##.#.#####
#..#..#.##.#....#.#.#.##.##...##..##.####..#..##......##.####..#.##.#.##.
#.#.#.##....##..####.###....####...####..#..##..#.#..........#.##..###..#
.#....###.#.#.#.####...######.#.##.......##..#..##.#...#...##.....####.#.
#.....#.#.###.##..##....##.##.##.#.##..##.##...###...#..#....#.#.##.#....
.##.#.#####.#......#..##.###..#..#..###.#........####.#.####.#.##.#####.#
..##.#.#..........#..#.##..#.#.#.....##.#.#.#######..#.##.###.#..#.#####.
.##..#.####.....#.#..#..###.##..###.##.##.#####..#.#.###...#.##.#.####.##
###.#.######...###...#..#..##.#####..#.#..#...##.#.#.#.##......#.##..#.##
#..#...#...#.##########.###..#.#.##..#.#..#####..######.###....##.##....#
##...#######..#######.#......###..##.#.##.####..###.###.#####..######.#.#
.###.####.#.#.##..####...##.##..#....#.#.#.#...#....#.##..#..#.....##.#.#
##..........#....##...#######.#.#####.##....##..#.#.##.#.#..#...##.##..##
##.......##..#.##...#..#..###.#.##......##...#.#...###..#....#..##.#.#...
#####.###....######.#.######.####..##..#..#.#....#######....##.###..##..#
##..#..#..##.#...##.#####.#.##..##...#..##.....#.#.#....##.##.#..#....###
..###.##.....#....###.#..#####.#.###.#.#..###.########....#.#.##........#
##.#...#...###..###.####..###.#######..######...##.#...#.#.#.###..##.#...
...#.#...####...###.##.##.##..#.#..##.#.#.####...#.#.....#...#..##....#..
####...#.#.#.......####.#..#..####.#..###.#......#..###...#.#.##...#....#
##......##...#.##..#.#...#####...#.#####....#....###.#..#...#....##.#..#.
...#####...#.....##.#.##.##..#.#..###.#.##.#####...##..#.#.##.##...###.#.
..#...##..####...##.###..#...#......##...##.#.#.###.#.#...#..#...#...####
.##.###.#.#.#.###.##...#.#.#...#.#...##..#.#....####.##...###..##..#...#.
.##.#####.#..##.##....##.##.#..##.#..##.#..#.##.###.....#..##.###.##...##
#.#...####..#.#....##...##..#...##...##.##.##.#..#.#.......####.#.###..#.
##.#.##...#.#.#..#.#..##.#.#.##..#....#..###.##.##.##.....#..#..###.##.#.
...#...#.#......########.###.#.#.###.####.#.#.####...#.#.#.....#...###...
....###.#.#..##..#.#.#.##.###.###.....###.##.##.##.#.##..#...#.####..##.#
#....###.........#.##..#..#.##.##....#.##..#.#.##......#.##.#..##..##....
#....####.#....####.##.#.#...#.####.#.#.##..#.##.####...#..##.##.##.#.##.
...##..#..#...##.#.#.#.####...#.#...#.#.#.###..#.###..#..##.#.#..#####...
..#####..######.##.##..#.####.#.#..#...#....#.#..#########..##.#.####.##.
#..#.#...#.####...#......#.#...#.#.###..#..#.#....#..#..##..#..##.#......
#.####...#######..###.#.#..##...##.#...#####...##....#.##.#.#.###..##.###
####..###...##..######..#####..#...#####...#.#.####.##.....##....#.#...##
.#####.#..##.###.......###.######.#######.#.##..###.###...#.#...#..#####.
.##.###...##..##..#.###.#.##.###...###...##.#...#..##.##...####.###...##.
#..#..#..##..#.#.#.##....##..#...##.##....##.###.##.#....#...#....#####..
.#..#..######...#.#.##.###.###.#.#...#.#....#..#..##.##..#..####...#.###.
##.##.#####..###.##.#.#.###......###.#.##....###..#..####.###......##....
#.#.###..#..###.#....#.#....##.#...#.##.####.#.##......#.#..##.#....#..##
####..##.#..#...###....#.##...#..#.#...#.####....##..#..##...#..#.....#..
..#..###.#..#.##....#######..##......#.##...##.##.##.##..#.#..##.##......
.##.#.#.###....####.#.#.###..#.###....#..#..###..##..###.#..#.##.#..####.
..###..##.##...#..#...#...#.#.##..####.#..#..#.#..######.##.#.##....#.#..
..###.......##.#.##.####.##...##.#######.#..#..###..#.#.##.#...##.###.##.
##.#..#.##.#.###.####..#.##.......###.########.#.#....#.#...###.#.#.#..##
#.#..#..##...####...#...#.###.##...##.....#...#..#.####.#.#.##.#####.....
.######.#..#..#...#..#..#..##.##.##...#....##.#.#.##.###..##....#########
##....#...#.###...########.#####.#######.#...#.##.#..#..#.###.#.######.##
.###.#....##.#.#.#.#.##..#####.####.###.#..#.##..##..##..##.....#.#.#####
#.#.###.#..##...###.#.....###.##..##.....##.###.####..###.#...#..##.###.#
#####.#####.#...##.######.#..#.####.##.#.#..#.....####.#...#.#.....##..##
.#.#.#.###.#.#.##.##...#####...#.....##.##.#######..#####.#.##..##...##..
#.#...##.#.###...##.#.#.##.#....####....#.#.#..#..##.####.##..#.#.....##.
.##.#.##..#####..#..#.#.###..##.#....######..##...###.#...##..##.#....###
.##...#..#.#######.#.#...##.##.##.#...##....#.###.#....#.#..##.###..#.###
####.#....#.#..#.#...#..#..#..##....##..####.#.####.#..#..#..#.#..#.#.##.
.####..#.##..#.#.###...########.##.##...#.##....##..##.#.####...#..#.##..
###.#.#...#.#...##.#.###......##...###.#..#.##.########.###......###.####
##..#####..#.#.##.#######.######....#.###..#.#...#...#.###.#.##..#...##..
""".strip().splitlines()

rounds_number_1 = 10
occupied_fields_init_list = []
for i, row in enumerate(d):
    for j, v in enumerate(row):
        if v == "#":
            occupied_fields_init_list.append((i, j))
occupied_fields = frozenset(occupied_fields_init_list)

considered_directions = (
    (-1, 0),
    (1, 0),
    (0, -1),
    (0, 1),
)
considered_directions_start = 0
adjacent_directions = tuple(
    filter(lambda x: x != (0, 0), product((-1, 0, 1), (-1, 0, 1)))
)


def get_proposed_field(old_field, occupied_fields):
    x, y = old_field
    if not any((x + dx, y + dy) in occupied_fields for dx, dy in adjacent_directions):
        return None

    for i in range(len(considered_directions)):
        dx, dy = considered_directions[
            (i + considered_directions_start) % len(considered_directions)
        ]
        if dx == 0:
            if not any((x + dx + a, y + dy) in occupied_fields for a in (-1, 0, 1)):
                return (x + dx, y + dy)
        else:  # dy == 0
            if not any((x + dx, y + dy + a) in occupied_fields for a in (-1, 0, 1)):
                return (x + dx, y + dy)
    return None


def process_fields(old_fields):
    new_fields = []
    proposed_fields = {}
    for old_field in old_fields:
        proposed_field = get_proposed_field(old_field, occupied_fields=old_fields)
        if proposed_field is not None:
            if proposed_field not in proposed_fields:
                proposed_fields[proposed_field] = []
            proposed_fields[proposed_field].append(old_field)
        else:
            new_fields.append(old_field)

    global considered_directions_start
    considered_directions_start += 1

    for proposed_field, from_fields in proposed_fields.items():
        if len(from_fields) > 1:
            new_fields += from_fields
        else:
            new_fields.append(proposed_field)

    return frozenset(new_fields)


def get_min_maxes(fields):
    return (
        min(map(lambda x: x[0], fields)),
        max(map(lambda x: x[0], fields)),
        min(map(lambda x: x[1], fields)),
        max(map(lambda x: x[1], fields)),
    )


def fields_to_str(fields):
    mx, Mx, my, My = get_min_maxes(fields)
    board = [["." for _ in range(my, My + 1)] for _ in range(mx, Mx + 1)]
    for x, y in fields:
        board[x - mx][y - my] = "#"
    return "\n".join("".join(row) for row in board)


def get_number_of_ground_tiles(fields):
    mx, Mx, my, My = get_min_maxes(fields)
    return (Mx - mx + 1) * (My - my + 1) - len(fields)


number_of_performed_rounds = 0
for _ in range(rounds_number_1):
    number_of_performed_rounds += 1
    new_occupied_fields = process_fields(occupied_fields)
    if occupied_fields == new_occupied_fields:
        break
    occupied_fields = new_occupied_fields

p1_res = get_number_of_ground_tiles(occupied_fields)
print(p1_res)


while True:
    number_of_performed_rounds += 1
    new_occupied_fields = process_fields(occupied_fields)
    if occupied_fields == new_occupied_fields:
        break
    occupied_fields = new_occupied_fields

print(number_of_performed_rounds)
